'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getAllMergedPullRequests = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var acc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var pullRequests = arguments[1];
    var firstPage, nextPage;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (pullRequests) {
              _context.next = 7;
              break;
            }

            _context.next = 3;
            return _utils.github.pulls.fetch({ state: 'closed', limit: 100 });

          case 3:
            firstPage = _context.sent;
            return _context.abrupt('return', getAllMergedPullRequests(acc.concat(firstPage), firstPage));

          case 7:
            if (!pullRequests.nextPage) {
              _context.next = 14;
              break;
            }

            _context.next = 10;
            return pullRequests.nextPage();

          case 10:
            nextPage = _context.sent;
            return _context.abrupt('return', getAllMergedPullRequests(acc.concat(nextPage), nextPage));

          case 14:
            return _context.abrupt('return', acc.filter(function (pr) {
              return pr.mergedAt;
            }));

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function getAllMergedPullRequests() {
    return _ref.apply(this, arguments);
  };
}();

exports.default = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
  return _regenerator2.default.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt('return', getAllMergedPullRequests());

        case 1:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined);
}));